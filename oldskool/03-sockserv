#!/usr/bin/python3
#

# Global Variables (change these if you must)
_log_level_ = 2
_start_volume_ = 15
_server_port_ = 3145
_refresh_rate_ = 600
_server_address_ = '127.0.0.1'
_music_dir_ = '/store/Media/Audio/Music'
_log_file_ = '/root/src/mp3.145/mp3145.log'

#----------------------------------------------------------
#
# DO NOT TOUCH BELOW THIS POINT !!!!!!!!!
#
#----------------------------------------------------------

# Imports
import os 
import random
import pygame
import threading
import socketserver
from time import sleep

# The logger / printer
def dprint(data = ''):
	global _log_file_
	global _log_level_
	if (_log_level_ > 0):
		log_dev = open(_log_file_, 'a')
		print(data, end = '', file = log_dev)
		log_dev.close()
	if (_log_level_ > 1):
		print(data, end = '')
	
# The pygame backend
dprint('Loading music thread...\n')
class musicThread(threading.Thread):
	def __init__(self, music_directory):
		threading.Thread.__init__(self)
		global _start_volume_	
		self.alive = 1
		self.force = -1
		self.shuffle = 1
		self.playing = 0		
		self.current = -1
		self.volume = 0.1
		self.playlist = []
		pygame.mixer.init()
		self.musicdir = music_directory
		self.setVol(2, _start_volume_)
		self.refreshMusic()
	def refreshMusic(self):
		genlist = []
		for root, subdirs, thefiles in os.walk(self.musicdir):
			for name in thefiles:
				if (name[-4:].lower() == '.mp3'):
					genlist.append(os.path.join(root, name))
					#dprint('Found: ' + os.path.join(root, name) + '\n')
			for name in subdirs:
				dprint(os.path.join(root, name) + '\n')			
		if (sorted(genlist) != sorted(self.playlist)):
			dprint("Playlists differ, re-calculating... ")
			if (self.shuffle): random.shuffle(genlist)
			else: genlist = sorted(genlist)
			if (self.current > -1):
				oldcur = self.playlist[self.current]			
				for x in range(0, len(genlist)):
					if (genlist[x] == oldcur): 
						self.current = x
						dprint('Found CURRENT at: #' + x + '\n')
						break
			else: dprint('No current song playing\n')
			self.playlist = genlist
	def getStatus(self):
		retme = ''
		if (self.playing): retme += 'Playing '
		else: retme +='Stopped on '
		if (self.current != -1): retme += self.getCurrent() + ', '
		else: retme += '?: No Song, '
		if (self.shuffle): retme += 'shuffle is on, '
		else: retme += 'shuffle is off, '
		retme += 'volume is ' + str(int(self.volume*100))
		if (self.force != -1): retme += '. Queued ' + str(self.force) + '/' + str(len(self.playlist)) + ": " + self.cleanName(self.playlist[self.force])
		return retme
	def getList(self):
		return self.playlist
	def getVol(self):
		return str(self.volume * 100)
	def setVol(self, upordown = -1, forcevol = 10):
		newvol = self.volume
		if (upordown == 2):
			newvol = (forcevol / 100)
		elif (upordown == 1):
			newvol += 0.1
		elif (upordown == -1):
			newvol -= 0.1
		if (newvol > 1.0):
			newvol = 1.0
		elif (newvol < 0.0):
			newvol = 0.0
		pygame.mixer.music.set_volume(newvol)
		self.volume = pygame.mixer.music.get_volume()
		return str(self.volume * 100)
	def setShuffle(self):
		if (self.shuffle == 0):
			self.shuffle = 1
			random.shuffle(self.playlist)
		else:
			self.shuffle = 0
			self.playlist = sorted(self.playlist)
		return self.shuffle
	def setPlay(self):
		if (self.playing == 0):
			self.playing = 1
			while (pygame.mixer.music.get_busy() != 1):
				sleep(0.1)
			return True
		else:
			self.playing = 0
			return False
	def setDie(self):
		self.playing = 0
		sleep(1)
		self.alive = 0
	def setForce(self, force):
		self.force = force
		if (force > 0):
			return self.cleanName(self.playlist[self.force])
	def getCurrent(self): 
		return str(self.current) + '/' + str(len(self.playlist)) + ': ' + self.cleanName(self.playlist[self.current])
	def playLast(self):
		if (self.current > 0):
			self.setForce(self.current - 1)
		else:
			self.setForce(len(self.playlist) - 1)	
		return self.playNext()
	def cleanName(self, name = ''): 
		return name[len(self.musicdir)+1:-4].replace(os.sep, ' - ')
	def playNext(self):
		self.previous = self.current
		if (self.force == -1):
			self.current += 1
			if (self.current >= len(self.playlist)):
				self.current = self.current - len(self.playlist)
		else:
			self.current = self.force
			self.force = -1
		
		if (pygame.mixer.music.get_busy()):
			pygame.mixer.music.stop()
		pygame.mixer.music.load(self.playlist[self.current])
		pygame.mixer.music.play()	
		return self.cleanName(self.playlist[self.current])
	def run(self):
		refr = 0
		while (self.alive):
			if ((pygame.mixer.music.get_busy() == 0) and (self.playing == 1)):
				dprint(self.playNext() + '\n')
			elif ((pygame.mixer.music.get_busy() == 1) and (self.playing == 0)):
				pygame.mixer.music.stop()
			refr += 1
			global _refresh_rate_
			if (refr == ((_refresh_rate_ * 4) + 1)):
				self.refreshMusic()
				refr = 0
			global _lag_level_
			sleep(0.25)

dprint('Starting music thread...\n')
music = musicThread(_music_dir_)
music.start()

# The socketserver interface
dprint('Loading TCP server...\n')
class MyTCPHandler(socketserver.BaseRequestHandler):
	def handle(self):
		self.active = 1
		dprint(self.client_address[0] + ' has connected.\n')
		while (self.active):
			global music			
			#self.request.sendall(b'Enter command, h for help: ')
			self.cmd = self.request.recv(1024).strip().decode('utf-8')
			dprint('Command: <' + self.cmd + '> From: [' + self.client_address[0] + ']\n')
			plist = music.getList()
			if (self.cmd == 'h'):				
				dprint('Sending help.\n')
				self.request.sendall(b'Commands:\n')
				self.request.sendall(b'---------\n')
				self.request.sendall(b'p - play/stop\n')
				self.request.sendall(b'n - skip/next\n')
				self.request.sendall(b'b - back/previous\n')
				self.request.sendall(b'r - random on/off\n')			
				self.request.sendall(b's - search songs\n')
				self.request.sendall(b'f - force song\n')
				self.request.sendall(b'l - list all songs\n')
				self.request.sendall(b'u - volume +10\n')
				self.request.sendall(b'd - volume -10\n')
				self.request.sendall(b'v - custom volume\n')
				self.request.sendall(b'c - current status\n')
				self.request.sendall(b'x - exit\n')
			elif (self.cmd == 'r'):
				if (music.setShuffle()):
					dprint('Random: On.\n')
					self.request.sendall(b'Random: On\n')
				else:
					dprint('Random: Off.\n')
					self.request.sendall(b'Random: Off\n')
			elif (self.cmd == 'p'):
				if (music.setPlay()):
					dprint('Play.\n')
					self.request.sendall(b'Play\n')
				else:
					dprint('Stop.\n')
					self.request.sendall(b'Stop\n')
			elif (self.cmd == 'n'):
				tmp = music.playNext() + '\n'
				dprint(tmp)
				self.request.sendall(tmp.encode('utf-8'))
			elif (self.cmd == 'c'):
				tmp = music.getStatus() + '\n'
				dprint(tmp)
				self.request.sendall(tmp.encode('utf-8'))
			elif (self.cmd == 'b'):
				tmp = music.playLast() + '\n'
				dprint(tmp)
				self.request.sendall(tmp.encode('utf-8'))
			elif (self.cmd == 'l'):
				dprint('Sending playlist.\n')
				self.request.sendall(b'<table style="font-size: 30px">')
				for x in range(0, len(plist)):
					self.request.sendall(b'<tr><td align=left>' + str(x).encode('utf-8') + b'</td><td align=left>' + music.cleanName(plist[x]).encode('utf-8') + b'</td></tr>\n')
				self.request.sendall(b'</table>')
				self.request.sendall(b'__END_OF_LIST__\n')
			elif (self.cmd == 's'):
				fff = 0;
				self.request.sendall(b'Search string: \n')
				testme = self.request.recv(1024).strip().decode('utf-8')
				dprint('Searching for: ' + testme + '\n')
				for x in range(0, len(plist)):
					if (plist[x].lower().find(testme) != -1):
						self.request.sendall(str(x).encode('utf-8') + b': ' + music.cleanName(plist[x]).encode('utf-8') + b'<br>\n')
						fff += 1
				self.request.sendall(b'__END_OF_LIST__\n')
				dprint('Found ' + str(fff) + ' items.\n')
			elif (self.cmd == 'f'):
				while True:
					try:
						self.request.sendall(b'Force song: \n')
						forceme = int(self.request.recv(1024).strip().decode('utf-8'))
						if ((forceme < 0) or (forceme >= len(plist))):
							int('fail')
						break
					except ValueError:
						self.request.sendall(b'Invalid; Try Again\n')
				tmp = 'Queued: ' + music.setForce(forceme) + '\n'	
				dprint(tmp)
				self.request.sendall(tmp.encode('utf-8'))
			elif (self.cmd == 'u'):
				tmp = 'Volume: ' + music.setVol(1) + '\n'
				dprint(tmp)
				self.request.sendall(tmp.encode('utf-8'))
			elif (self.cmd == 'd'):
				tmp = 'Volume: ' + music.setVol() + '\n'
				dprint(tmp)
				self.request.sendall(tmp.encode('utf-8'))
			elif (self.cmd == 'v'):
				while True:
					try:
						self.request.sendall(b'New volume (current=' + music.getVol().encode('utf-8') + b') [1-100] : \n')
						newvol = int(self.request.recv(1024).strip().decode('utf-8'))
						if ((newvol < 0) or (newvol > 100)):
							int('fail')
						tmp = 'Volume: ' + str(music.setVol(2, newvol)) + '\n'
						dprint(tmp)
						self.request.sendall(tmp.encode('utf-8'))
						break
					except ValueError:
						self.request.sendall(b'Error: Try Again\n')
			elif (self.cmd == 'x'):
				self.request.sendall(b'Goodbye.\n')
				dprint('Disconnecting ' + self.client_address[0] + '\n')
				self.active = 0
			elif (self.cmd == 'halt'):
				self.active = 0
				dprint('Shutting down... \n')
				print('Shutting down... \n')
				self.request.sendall(b'Shutting down... Goodbye.\n')
				self.request.close()		
				music.setDie()
				self.shutdown()
			else:
				self.request.sendall(b'Unknown command: ' + self.cmd.encode('utf-8') + b'\n')
	
# Do-it-to-it			
dprint('Starting TCP server...\n')
server = socketserver.TCPServer((_server_address_, _server_port_), MyTCPHandler)
print('mp3.145 is ready.\n')
server.serve_forever()
exit(0)
